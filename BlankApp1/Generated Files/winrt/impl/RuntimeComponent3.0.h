// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup {

struct IComponentConnector;

}

WINRT_EXPORT namespace winrt::RuntimeComponent3 {

struct IMyUserControl1Class;
struct MyUserControl1;

}

namespace winrt::impl {

template <> struct category<RuntimeComponent3::IMyUserControl1Class>{ using type = interface_category; };
template <> struct category<RuntimeComponent3::MyUserControl1>{ using type = class_category; };
template <> struct name<RuntimeComponent3::IMyUserControl1Class>{ static constexpr auto & value{ L"RuntimeComponent3.IMyUserControl1Class" }; };
template <> struct name<RuntimeComponent3::MyUserControl1>{ static constexpr auto & value{ L"RuntimeComponent3.MyUserControl1" }; };
template <> struct guid_storage<RuntimeComponent3::IMyUserControl1Class>{ static constexpr guid value{ 0x6CC5E1F0,0xA242,0x556D,{ 0x6F,0x97,0x16,0xC4,0x90,0xE1,0x87,0xDA } }; };
template <> struct default_interface<RuntimeComponent3::MyUserControl1>{ using type = RuntimeComponent3::IMyUserControl1Class; };

template <> struct abi<RuntimeComponent3::IMyUserControl1Class>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL InitializeComponent() noexcept = 0;
};};

template <typename D>
struct consume_RuntimeComponent3_IMyUserControl1Class
{
    void InitializeComponent() const;
};
template <> struct consume<RuntimeComponent3::IMyUserControl1Class> { template <typename D> using type = consume_RuntimeComponent3_IMyUserControl1Class<D>; };

}
