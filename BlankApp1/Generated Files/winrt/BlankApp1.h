// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/BlankApp1.2.h"

namespace winrt::impl {

template <typename D>
struct produce<D, BlankApp1::IMainPage> : produce_base<D, BlankApp1::IMainPage>
{};

}

WINRT_EXPORT namespace winrt::BlankApp1 {

inline MainPage::MainPage() :
    MainPage(impl::call_factory<MainPage>([](auto&& f) { return f.template ActivateInstance<MainPage>(); }))
{}

inline XamlMetaDataProvider::XamlMetaDataProvider() :
    XamlMetaDataProvider(impl::call_factory<XamlMetaDataProvider>([](auto&& f) { return f.template ActivateInstance<XamlMetaDataProvider>(); }))
{}

}

namespace winrt::impl {

}

WINRT_EXPORT namespace winrt::experimental::reflect {

template <>
struct base_type<BlankApp1::MainPage> { using type = Windows::UI::Xaml::Controls::Page; };
}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::BlankApp1::IMainPage> : winrt::impl::hash_base<winrt::BlankApp1::IMainPage> {};
template<> struct hash<winrt::BlankApp1::MainPage> : winrt::impl::hash_base<winrt::BlankApp1::MainPage> {};
template<> struct hash<winrt::BlankApp1::XamlMetaDataProvider> : winrt::impl::hash_base<winrt::BlankApp1::XamlMetaDataProvider> {};

}
